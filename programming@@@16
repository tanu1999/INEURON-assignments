{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "23655325-9c89-4d3e-a3ee-8cc10bb34464",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " incredible\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "in . . . in . . . incredible?\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " without\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wi . . . wi . . . without?\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " outstanding\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ou . . . ou . . . outstanding?\n"
     ]
    }
   ],
   "source": [
    "def stutters():\n",
    "    n=input()\n",
    "    variable_1=n.replace(n[0:2],(n[0:2]+\" . . . \")*2+n[0:2])+\"?\"\n",
    "    print(variable_1)\n",
    "for i in range(3):\n",
    "    stutters()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ea7e2a43-e445-42cf-9358-85672762ad4d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "57.29577951308232\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 20\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1145.9155902616465\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 50\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2864.7889756541163\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "def degreetoradian():\n",
    "    n=int(input())\n",
    "    radian=(180/math.pi)*n\n",
    "    print(radian)\n",
    "for i in range(3):\n",
    "    degreetoradian()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "bb5550f5-e25a-4d40-8ac3-9c2619d65022",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 5\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 10\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 14\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n"
     ]
    }
   ],
   "source": [
    "def curzon():\n",
    "    n=int(input())\n",
    "    a=2**n+1\n",
    "    b=2*n+1\n",
    "    if a%b==0:\n",
    "        print(\"True\")\n",
    "    else:\n",
    "        print(\"False\")\n",
    "for i in range(3):\n",
    "    curzon()\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ef8ea296-2bd7-47a1-8e2e-f3aa7e793d9e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.598076211353316\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 2\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10.392304845413264\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 3\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "23.382685902179844\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "def hexagon():\n",
    "    n=int(input())\n",
    "    area=((3*math.sqrt(3))/2)*n**2\n",
    "    print(area)\n",
    "for i in range(3):\n",
    "    hexagon()\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "920b2cf5-eb5f-40da-af17-29fb953d9ff0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 101\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['1', '0', '1']\n",
      "5\n"
     ]
    }
   ],
   "source": [
    "n=input(\"enter a binary number :\")\n",
    "m=input(\"enter a \n",
    "l=list(n)\n",
    "l[::-1]\n",
    "print(l)\n",
    "sum=0\n",
    "for i in range(len(l)):\n",
    "    sum=sum+int(l[i])*2**i\n",
    "print(sum)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "7922941a-cd99-4f87-8f73-21a505ce9553",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 6\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 1, 0]\n",
      "110"
     ]
    }
   ],
   "source": [
    "n=int(input())\n",
    "l=[]\n",
    "while n>0:\n",
    "    num=n%2\n",
    "    n=n//2\n",
    "    l.append(num)\n",
    "l.reverse()\n",
    "print(l)\n",
    "for ele in l:\n",
    "    print(ele,end=\"\")\n",
    "    \n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4a5bf1cc-4f40-40c2-b49d-f250fc5090ca",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
